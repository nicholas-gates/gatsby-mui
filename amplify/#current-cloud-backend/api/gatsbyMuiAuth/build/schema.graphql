type CountryFoodSales {
  id: ID!
  countryCode: String!
  donutSales: Int!
  kebabSales: Int!
  sandwichSales: Int!
  burgerSales: Int!
  hotdogSales: Int!
}

type Talk {
  id: ID!
  name: String!
  description: String!
  speakerName: String!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelCountryFoodSalesConnection {
  items: [CountryFoodSales]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelCountryFoodSalesFilterInput {
  id: ModelIDInput
  countryCode: ModelStringInput
  donutSales: ModelIntInput
  kebabSales: ModelIntInput
  sandwichSales: ModelIntInput
  burgerSales: ModelIntInput
  hotdogSales: ModelIntInput
  and: [ModelCountryFoodSalesFilterInput]
  or: [ModelCountryFoodSalesFilterInput]
  not: ModelCountryFoodSalesFilterInput
}

type Query {
  getCountryFoodSales(id: ID!): CountryFoodSales
  listCountryFoodSaless(filter: ModelCountryFoodSalesFilterInput, limit: Int, nextToken: String): ModelCountryFoodSalesConnection
  getTalk(id: ID!): Talk
  listTalks(filter: ModelTalkFilterInput, limit: Int, nextToken: String): ModelTalkConnection
}

input CreateCountryFoodSalesInput {
  id: ID
  countryCode: String!
  donutSales: Int!
  kebabSales: Int!
  sandwichSales: Int!
  burgerSales: Int!
  hotdogSales: Int!
}

input UpdateCountryFoodSalesInput {
  id: ID!
  countryCode: String
  donutSales: Int
  kebabSales: Int
  sandwichSales: Int
  burgerSales: Int
  hotdogSales: Int
}

input DeleteCountryFoodSalesInput {
  id: ID
}

type Mutation {
  createCountryFoodSales(input: CreateCountryFoodSalesInput!, condition: ModelCountryFoodSalesConditionInput): CountryFoodSales
  updateCountryFoodSales(input: UpdateCountryFoodSalesInput!, condition: ModelCountryFoodSalesConditionInput): CountryFoodSales
  deleteCountryFoodSales(input: DeleteCountryFoodSalesInput!, condition: ModelCountryFoodSalesConditionInput): CountryFoodSales
  createTalk(input: CreateTalkInput!, condition: ModelTalkConditionInput): Talk
  updateTalk(input: UpdateTalkInput!, condition: ModelTalkConditionInput): Talk
  deleteTalk(input: DeleteTalkInput!, condition: ModelTalkConditionInput): Talk
}

input ModelCountryFoodSalesConditionInput {
  countryCode: ModelStringInput
  donutSales: ModelIntInput
  kebabSales: ModelIntInput
  sandwichSales: ModelIntInput
  burgerSales: ModelIntInput
  hotdogSales: ModelIntInput
  and: [ModelCountryFoodSalesConditionInput]
  or: [ModelCountryFoodSalesConditionInput]
  not: ModelCountryFoodSalesConditionInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Subscription {
  onCreateCountryFoodSales: CountryFoodSales @aws_subscribe(mutations: ["createCountryFoodSales"])
  onUpdateCountryFoodSales: CountryFoodSales @aws_subscribe(mutations: ["updateCountryFoodSales"])
  onDeleteCountryFoodSales: CountryFoodSales @aws_subscribe(mutations: ["deleteCountryFoodSales"])
  onCreateTalk: Talk @aws_subscribe(mutations: ["createTalk"])
  onUpdateTalk: Talk @aws_subscribe(mutations: ["updateTalk"])
  onDeleteTalk: Talk @aws_subscribe(mutations: ["deleteTalk"])
}

type ModelTalkConnection {
  items: [Talk]
  nextToken: String
}

input ModelTalkFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  speakerName: ModelStringInput
  and: [ModelTalkFilterInput]
  or: [ModelTalkFilterInput]
  not: ModelTalkFilterInput
}

input CreateTalkInput {
  id: ID
  name: String!
  description: String!
  speakerName: String!
}

input UpdateTalkInput {
  id: ID!
  name: String
  description: String
  speakerName: String
}

input DeleteTalkInput {
  id: ID
}

input ModelTalkConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  speakerName: ModelStringInput
  and: [ModelTalkConditionInput]
  or: [ModelTalkConditionInput]
  not: ModelTalkConditionInput
}
